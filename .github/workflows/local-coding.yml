name: local-coding

on:
  workflow_dispatch:
  repository_dispatch:
    types: [nightly_ticket]
  push:
    branches:
      - dev
      - feature/**

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: [self-hosted, Windows, X64]
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure PowerShell can run scripts
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Use local Python 3.10
        shell: pwsh
        run: |
          $env:PATH = "C:\Program Files\Python310;$env:PATH"
          python --version
          python -m pip install --upgrade pip
          pip install pytest

      - name: Environment health check
        shell: pwsh
        run: |
          Write-Host "Node version:"; node -v
          Write-Host "Python version:"; python --version
          Write-Host "Git version:"; git --version

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          if (Test-Path package-lock.json) {
            npm ci
          } elseif (Test-Path package.json) {
            npm install
          } elseif (Test-Path yarn.lock) {
            yarn install --frozen-lockfile
          } elseif (Test-Path pnpm-lock.yaml) {
            pnpm i --frozen-lockfile
          } else {
            Write-Host "‚ö†Ô∏è  No JS project detected, skipping npm/yarn install."
          }

      - name: Install Playwright browsers
        shell: pwsh
        run: |
          try { npx playwright install } catch { Write-Host "Playwright already installed." }

      - name: Run patch/apply script
        shell: pwsh
        run: |
          if (Test-Path scripts/request_patch_and_apply.py) {
            python scripts/request_patch_and_apply.py
          } else {
            Write-Host "‚ö†Ô∏è Script not found, skipping"
          }

      - name: Run tests (Playwright + Pytest)
        shell: pwsh
        run: |
          # Run Playwright only if e2e tests exist
          if (Test-Path "tests\e2e") {
            Write-Host "‚ñ∂ Running Playwright tests..."
            npx playwright install --with-deps
            npx playwright test
          } else {
            Write-Host "‚ö†Ô∏è  No Playwright tests found, skipping."
          }

          # Run pytest if tests folder exists
          if (Test-Path "tests") {
            Write-Host "‚ñ∂ Running Pytest..."
            $env:PATH = "C:\Users\maanh\AppData\Roaming\Python\Python310\Scripts;$env:PATH"
            python -m pytest -q
          } else {
            Write-Host "‚ö†Ô∏è  No Python tests found, skipping."
          }

      - name: Configure git author
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # üß© NEW SSH CONFIG STEP
      - name: Configure git remote to use SSH
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          $env:GIT_SSH_COMMAND = "ssh -i C:/Users/maanh/.ssh/id_agent_runner -o IdentitiesOnly=yes"
          git remote set-url origin git@github.com:EZChoices/agent-factory.git

      - name: Verify SSH remote
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          git remote -v

      - name: Create branch + commit
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          $branch = "auto/patch-${{ github.run_id }}"
          git checkout -b $branch
          git add -A
          git commit -m "Auto patch via Local Coding Runner (run ${{ github.run_id }})" || echo "No changes to commit"
          git push --set-upstream origin $branch

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Auto patch via Local Coding Runner"
          body: "Generated by local self-hosted runner."
          branch: "auto/patch-${{ github.run_id }}"
          base: "dev"
